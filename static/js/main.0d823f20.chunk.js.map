{"version":3,"sources":["Wheel.js","Display.js","Case.js","App.js","serviceWorker.js","index.js"],"names":["Wheel","doSomething","e","updateActiveMenu","props","detail","distanceFromOrigin","angle","Math","abs","distanceFromLast","className","id","this","wheel","document","getElementById","ZingTouch","Region","bind","React","Component","Display","active","Case","App","direction","state","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2WAoEeA,E,kDAhEX,aAAc,IAAD,8BACT,gBA2BJC,YAAc,SAACC,GAAM,IACVC,EAAoB,EAAKC,MAAzBD,iBAKP,GAJiC,IAA9BD,EAAEG,OAAOC,qBACR,EAAKC,MAAQL,EAAEG,OAAOE,OAGvBC,KAAKC,IAAI,EAAKF,MAAQL,EAAEG,OAAOE,OAAO,GAAG,CAExC,GADA,EAAKA,MAAQL,EAAEG,OAAOE,MACS,IAA5BL,EAAEG,OAAOK,iBACR,OAEDR,EAAEG,OAAOK,iBAAiB,EACzBP,EAAiB,GAEjBA,EAAiB,KAxCzB,EAAKI,MAAQ,EAFJ,E,qDAKT,OACI,yBAAKI,UAAU,kBAAkBC,GAAG,mBAChC,yBAAKD,UAAU,QAAQC,GAAG,SACtB,yBAAKD,UAAU,WAAWC,GAAG,QAA7B,QAGA,yBAAKD,UAAU,WAAWC,GAAG,WACzB,uBAAGD,UAAU,yBAEjB,yBAAKA,UAAU,WAAWC,GAAG,cACzB,uBAAGD,UAAU,gBACb,uBAAGA,UAAU,kBAEjB,yBAAKA,UAAU,WAAWC,GAAG,WACzB,uBAAGD,UAAU,2BAIrB,yBAAKA,UAAU,QAAQC,GAAG,a,0CA0BlC,IAAIX,EAAcY,KAAKZ,YACjBa,EAAQC,SAASC,eAAe,SACjBC,IAAUC,OAAOJ,GAEzBK,KAAKL,EAAO,UAAU,SAAUZ,GACzCD,EAAYC,U,GAvDJkB,IAAMC,WCqBXC,G,6KApBD,IACCC,EAAUV,KAAKT,MAAfmB,OACP,OACI,yBAAKZ,UAAU,UACX,yBAAKA,UAAU,QACX,uCACA,4BACc,IAATY,EAAW,wBAAIZ,UAAU,UAAd,cAAuC,0CACzC,IAATY,EAAW,wBAAIZ,UAAU,UAAd,SAAkC,qCACpC,IAATY,EAAW,wBAAIZ,UAAU,UAAd,SAAkC,qCACpC,IAATY,EAAW,wBAAIZ,UAAU,UAAd,YAAqC,+C,GAXnDS,IAAMC,YCgBbG,E,uKAbD,IAAD,EAC6BX,KAAKT,MAAhCmB,EADF,EACEA,OAAOpB,EADT,EACSA,iBACd,OACI,yBAAKQ,UAAU,kBACX,yBAAKA,UAAU,QACX,kBAAC,EAAD,CAASY,OAAQA,IACjB,kBAAC,EAAD,CAAOA,OAAQA,EAAQpB,iBAAkBA,U,GAP1CiB,IAAMC,WCmCVI,E,kDAlCb,aAAe,IAAD,8BACZ,gBAMFtB,iBAAmB,SAACuB,GACF,IAAbA,EACsB,IAApB,EAAKC,MAAMJ,OACZ,EAAKK,SAAS,CAACL,OAAO,IAEtB,EAAKK,SAAS,CAACL,OAAO,EAAKI,MAAMJ,OAAO,IAGnB,IAApB,EAAKI,MAAMJ,OACZ,EAAKK,SAAS,CAACL,OAAO,IAEtB,EAAKK,SAAS,CAACL,OAAO,EAAKI,MAAMJ,OAAO,KAhB5C,EAAKI,MAAQ,CACXJ,OAAQ,GAHE,E,qDAwBJ,IACDA,EAAUV,KAAKc,MAAfJ,OACP,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAMY,OAAQA,EAASpB,iBAAkBU,KAAKV,wB,GA7BpCiB,IAAMC,WCOJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d823f20.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Wheel.css\"\nimport ZingTouch from 'zingtouch';\nclass Wheel extends React.Component {\n    constructor(){\n        super();\n        this.angle = 0;\n    }\n    render() {\n        return (\n            <div className=\"wheel-container\" id=\"wheel-container\">\n                <div className=\"wheel\" id=\"wheel\" >\n                    <div className=\"controll\" id=\"menu\">\n                        MENU\n                    </div>\n                    <div className=\"controll\" id=\"forward\">\n                        <i className=\"fas fa-fast-forward\"></i>\n                    </div>\n                    <div className=\"controll\" id=\"play-pause\">\n                        <i className=\"fas fa-play\"></i>\n                        <i className=\"fas fa-pause\"></i>\n                    </div>\n                    <div className=\"controll\" id=\"reverse\">\n                        <i className=\"fas fa-fast-backward\"></i>\n                    </div>\n                </div>\n\n                <div className=\"blank\" id=\"blank\"></div>\n            </div>\n        )\n    }\n\n    doSomething = (e) =>{ \n        const {updateActiveMenu} = this.props;\n        if(e.detail.distanceFromOrigin===0){\n            this.angle = e.detail.angle;\n        }\n\n        if(Math.abs(this.angle - e.detail.angle)>25){\n            this.angle = e.detail.angle;\n            if(e.detail.distanceFromLast===0){\n                return;\n            }\n            if(e.detail.distanceFromLast>0){\n                updateActiveMenu(1);\n            }else{\n                updateActiveMenu(0);\n            }\n            \n        }\n    }\n\n    componentDidMount() {\n        var doSomething = this.doSomething;\n        const wheel = document.getElementById(\"wheel\");\n        const activeRegion = ZingTouch.Region(wheel);\n\n        activeRegion.bind(wheel, 'rotate', function (e) {\n            doSomething(e);\n        });\n\n        \n\n    }\n\n}\n\n\nexport default Wheel;","import React from 'react';\nimport \"./Display.css\"\n\nclass Display extends React.Component {\n    render() {\n        const {active} = this.props;\n        return (\n            <div className=\"screen\">\n                <div className=\"menu\">\n                    <h3>iPod.js</h3>\n                    <ul>\n                        {active===1?<li className=\"active\">Cover Flow</li>:<li>Cover Flow</li>}\n                        {active===2?<li className=\"active\">Music</li>:<li>Music</li>}\n                        {active===3?<li className=\"active\">Games</li>:<li>Games</li>}\n                        {active===4?<li className=\"active\">Settings</li>:<li>Settings</li>}\n                    </ul>\n                </div>\n\n            </div>\n        )\n    }\n}\n\n\nexport default Display;","import React from 'react';\nimport \"./Case.css\"\nimport Wheel from './Wheel.js'\nimport Display from './Display.js'\n\nclass Case extends React.Component {\n    render() {\n        const {active,updateActiveMenu} = this.props;\n        return (\n            <div className=\"case-container\">\n                <div className=\"case\">\n                    <Display active={active} />\n                    <Wheel active={active} updateActiveMenu={updateActiveMenu}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Case;","import React from 'react';\nimport './App.css';\nimport Case from './Case.js';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      active: 2,\n    }\n  }\n\n  updateActiveMenu = (direction)=>{\n    if(direction ===1){\n      if(this.state.active===4){\n        this.setState({active:1})\n      }else{\n        this.setState({active:this.state.active+1})\n      }\n    }else{\n      if(this.state.active===1){\n        this.setState({active:4})\n      }else{\n        this.setState({active:this.state.active-1})\n      }\n    }\n  }\n\n\n  render() {\n    const {active} = this.state;\n    return (\n      <div className=\"App\">\n        <Case active={active}  updateActiveMenu={this.updateActiveMenu} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}